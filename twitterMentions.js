#!/usr/bin/env node

var Twitter = require('node-twitter');
var key = require('./twitterKeys');

var globalString = "BlankGlobalString";

var twitterRestClient = new Twitter.RestClient( key.API_KEY, key.API_SECRET, key.TOKEN, key.TOKEN_SECRET );

var sp = require("serialport");
var port = '/dev/ttyO4';
var options = {baudrate: 9600, databits: 8, parity: 0, localecho: 0, stopbits: 1};
var flipPort = new sp.SerialPort( port, options );
var strLength = 0; // Holds the number of characters in the string that is about to be rendered to the display.
var outer = 0;
var N = 56; // Max number of colums available.
var colCount = 0;
var charValue = 0;
var wordPntr = 0;
var lineText = "";
var lineTextArray = new Array(30);
var totalWords = 0;
var disCol = 0;  // Counts columns across the display as they are filling with pixels.
var message1 = new Buffer( [0x80,0x83,0x0,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message2 = new Buffer( [0x80,0x83,0x1,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message3 = new Buffer( [0x80,0x83,0x2,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message4 = new Buffer( [0x80,0x83,0x3,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message5 = new Buffer( [0x80,0x83,0x4,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message6 = new Buffer( [0x80,0x83,0x5,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message7 = new Buffer( [0x80,0x83,0x6,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var message8 = new Buffer( [0x80,0x83,0x7,0x0,0x01,0x0,0x05,0x0,0x09,0x0,0x7f,0x0,0x7e,0x0,0x7c,0x0,0x78,0x0,0x70,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8F] );
var pixels1 = new Buffer( [0x2F,0x0,0x3,0x0,0x3,0x0,0xA,0x1f,0xa,0x1f,0xa,0x0,0x24,0x2a,0x3f,0x2a,0x12,0x0,0x31,0x8,0x4,0x23,0x0,0x0] );//0 to 23
var pixels2 = new Buffer( [0x38,0x47,0x3d,0x33,0x50,0x0,0x3,0x0,0x0,0x1e,0x21,0x0,0x0,0x21,0x1e,0x0,0x0,0x2a,0x1c,0x1c,0x2a,0x0,0x0] );//24 to 46
var pixels3 = new Buffer( [0x8,0x1c,0x8,0x0,0x0,0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x0,0x0,0x20,0x0,0x0,0x30,0xa,0x3,0x0,0x0] );//47 to 68
var pixels4 = new Buffer( [0x1e,0x21,0x21,0x1e,0x0,0x0,0x22,0x3f,0x20,0x0,0x22,0x31,0x29,0x26,0x0,0x12,0x21,0x29,0x16,0x0,0xc,0xa,0x3f,0x8,0x0] );//69 to 93
var pixels5 = new Buffer( [0x17,0x25,0x25,0x19,0x0,0x1e,0x25,0x25,0x18,0x0,0x21,0x11,0x9,0x7,0x0,0x1a,0x25,0x25,0x1a,0x0,0x6,0x29,0x29,0x1e,0x0] );//94 to 118
var pixels6 = new Buffer( [0x14,0x0,0x40,0x34,0x0,0x8,0x14,0x22,0x0,0x0,0x14,0x14,0x0,0x22,0x14,0x8,0x0] );//119 to 137
var pixels7 = new Buffer( [0x2,0x29,0x6,0x0,0x0,0x1e,0x21,0x0d,0x11,0x0e,0x0,0x3e,0x9,0x9,0x3e,0x0,0x3f,0x25,0x25,0x1a,0x0,0x1e,0x21,0x21,0x12,0x0,0x3f,0x21,0x21,0x1e,0x0] );//138 to 163
var pixels8 = new Buffer( [0x3f,0x29,0x29,0x0,0x3f,0x9,0x9,0x0,0x1e,0x21,0x29,0x32,0x0,0x3f,0x8,0x8,0x3f,0x0,0x21,0x3f,0x21,0x0,0x0] );//164 to 189
var pixels9 = new Buffer( [0x11,0x21,0x1f,0x1,0x0,0x0,0x3f,0x8,0x14,0x23,0x0,0x0,0x3f,0x20,0x20,0x0,0x0,0x3f,0x2,0xc,0x2,0x3f,0x0,0x3f,0x2,0xc,0x10,0x3f,0x0] );//190 to 218
var pixels10 = new Buffer( [0x1e,0x21,0x21,0x1e,0x0,0x0,0x3f,0x9,0x9,0x6,0x0,0x0,0x1e,0x21,0x29,0x1e,0x20,0x0,0x3f,0x9,0x9,0x36,0x0,0x0,0x12,0x25,0x29,0x12,0x0,0x0] );//219 to 248
var pixels11 = new Buffer( [0x1,0x1,0x3f,0x1,0x0,0x0,0x1f,0x20,0x20,0x1f,0x0,0x0,0x3,0xc,0x30,0xc,0x3,0x0,0x3f,0x10,0xc,0x10,0x3f,0x0,0x21,0x12,0xc,0x12,0x21,0x0] );//249 to 278
var pixels12 = new Buffer( [0x1,0x6,0x38,0x6,0x1,0x0,0x31,0x29,0x25,0x23,0x0,0x0,0x3f,0x21,0x0,0x0,0x3,0xc,0x30,0x0,0x0,0x21,0x3f,0x0,0x0] );//279 to 303
var pixels13 = new Buffer( [0x2,0x1,0x2,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x3,0x0,0x0,0x10,0x2a,0x2a,0x3c,0x0,0x3f,0x28,0x10,0x0,0x0] );//304 to 326
var pixels14 = new Buffer( [0x18,0x24,0x24,0x0,0x0,0x18,0x24,0x3f,0x0,0x0,0x1c,0x2a,0x2c,0x0,0x0,0x8,0x3e,0x9,0x0,0x0,0x58,0x54,0x38,0x0,0x0] );//327 to 351
var pixels15 = new Buffer( [0x3f,0x8,0x38,0x0,0x0,0x3a,0x0,0x20,0x40,0x3a,0x0,0x0,0x3f,0x18,0x24,0x0,0x0,0x3f,0x0,0x0,0x0] );//352 to 372
var pixels16 = new Buffer( [0x3c,0x4,0x3c,0x4,0x38,0x0,0x3c,0x4,0x38,0x0,0x0,0x18,0x24,0x18,0x0,0x0,0x7c,0x14,0x8,0x0,0x0,0x8,0x14,0x7c,0x0,0x0] );//373 to 398
var pixels17 = new Buffer( [0x38,0x4,0x4,0x0,0x24,0x2a,0x12,0x0,0x0,0x4,0x3e,0x4,0x0,0x0,0x1c,0x20,0x3c,0x0,0x0,0x1c,0x20,0x1c,0x0,0x0] );//399 to 422
var pixels18 = new Buffer( [0x1c,0x20,0x10,0x20,0x1c,0x0,0x24,0x18,0x24,0x0,0xc,0x50,0x3c,0x0,0x0,0x24,0x34,0x2c,0x0,0x0,0x8,0x36,0x21,0x0,0x0] );//423 to 447
var pixels19 = new Buffer( [0x3b,0x0,0x21,0x36,0x8,0x0,0x0,0x8,0x4,0x8,0x4,0x0,0x0,0x0] );//448
var pixels = new Buffer.concat( [pixels1,pixels2,pixels3,pixels4,pixels5,pixels6,pixels7,pixels8,pixels9,pixels10,pixels11,pixels12,pixels13,pixels14,pixels15,pixels16,pixels17,pixels18,pixels19] );
//var mytext = "Squeak 'n Ziggy R crazy cats.";
//var mytext = "Howly cats annoy me."
var mytext = "SF       0                            ATL  0                                7pm start               Go Giants!"
var colptr = 0;

var lookup = [459,0,2,6,12,18,24,30,33,37,41,47,53,57,61,64,69,75,79,84,89,94,99,104,109,114,119,121,124,129,132,
136,141,147,152,157,162,167,171,175,180,185,190,196,202,207,213,219,225,231,237,243,249,255,261,267,273,279,285,291,295,
300,304,310,314,317,322,327,332,337,342,347,352,357,359,364,369,373,379,384,389,394,399,403,408,413,418,423,429,
433,438,443,448,450,455,460];

var length = [1,2,4,6,6,5,6,2,3,3,5,4,3,3,2,4,5,4,5,5,5,5,5,5,5,5,2,3,4,3,4,5,6,5,5,5,5,4,4,5,5,4,5,5,4,6,6,5,5,6,5,
5,5,5,6,6,6,6,5,3,4,3,3,3,2,5,4,4,4,4,4,4,4,2,4,4,2,6,4,4,4,4,4,4,4,4,4,6,4,4,4,4,2,4,5,2]
 
flipPort.on('data', function(data) {} );  // Don't do anything with received data.
flipPort.on('open', function() { console.log('Port open'); } );



//  Main()
partA();
return;
// End of Main()

function partA()
{
    clearLines();  // Clear the flipdot display memory.
    GetTweet();
    setTimeout(partB, 10000);  // Wait 5 seconds, then start to run the function partB().
}

function partB()
{
    console.log(globalString);
    mytext = globalString;
    console.log(mytext);
    wordArray = mytext.split(" ");
    if ( (wordArray[0] == "Twitter") && (wordArray[1] == "call") ) { flipPort.close(); return; }
    myLength = wordArray.length;
    //console.log(wordArray);
    console.log("Number of words in the sentence = " + myLength);
    /* Now send the message to the flipdot display. */
       while ( outer <= 3 )
   {
    // Now go through the text, determining how many words can fit into N columns.
    wordPntr = 0;
    colCount = 0;
    colptr = 0;
    while( (colCount < N) && (totalWords < myLength) )
    {
        word = wordArray[wordPntr];
        if ( word == '' )
        {
           word = " ";
        }
        lineTextArray[wordPntr] = word;  // Always add the word onto the string to printout. Will remove overflow word later.
        wordLen = word.length;   // How many letters in the current word.
        if (wordLen == 0)
        {
           wordLen = 1;
        }
        // Now count how many columns needed to fit the current word.
        for( var i = 0; i<wordLen; i++)  // Cycle through each letter of current word, adding up how many columns each letter rrquires.
        {
            myChar = word.substring( i, i + 1 );
            charValue = myChar.charCodeAt(0);   // Gets the ascii value of the char (in decimal).
            //console.log("char " + myChar + " has code value " + charValue);
            charValue -= 32;
            colCount += length[charValue];  // This is how many columns the letter needs, including the trailing blank letter-spacing column.
            //console.log("After that char, colCount = " + colCount);
        }
        if ( (word !== " ") && ( colCount < (N-1) ) )
        {
           colCount++; // Add the width of a " " character, because it will be added to the lineText string later, and need to account for its width.
        }
        wordPntr++;
        totalWords++;
    }
    // Now remove the words from wordArray that will print on that line.
    lineText = "";
    if( (wordPntr > 1) && (colCount > N) )  // Multiple words on line, AND it overflowed the colums. So don't count the overflowing word.
    {
        for( var Pntr = 0; Pntr <= (wordPntr-2); Pntr++)
        {
            lineText = lineText + wordArray[Pntr] + " ";
        }
        wordArray = wordArray.slice(wordPntr-1); /* Retain all the words prior to overflowing the number of columns. */
        totalWords--;  // Account for the fact that you "added back in" a word in the wordArray by not subtracting it.
        wordPntr--;
    }
    else if( wordPntr > 1 )  // Multiple words on the line, but the line did NOT overflow the number of colums available. Take al the words for the current line.
    {
        for( var Pntr = 0; Pntr <= (wordPntr-1); Pntr++)
        {
            lineText = lineText + wordArray[Pntr] + " ";
        }
        wordArray = wordArray.slice(wordPntr); /* Retain all the words. */
    }
    else
    {
        lineText = wordArray[0];  // Will print out the 0th word of the word array to the flip dot display
        wordArray = wordArray.slice(1); /* Retain from the 1st word to the end of the wordArray. (Delete the 0th word.) */
    }
    console.log("Words for line " + outer + " are: " + lineText);
    // New load up line "outer" to render the string in lineText.
    strLength = lineText.length;
    disCol = 0;   // Set the column pointer back to the left.
    for( lop = 0; lop < strLength; lop++)  // Process the string one char at a time.
    {
       myChar = lineText.substring( lop, lop + 1 );  // Get the next character.
       //console.log(myChar);
       placeText( myChar);  // Call the routine that puts the pixels into the buffer.
    }

    console.log("Remaining words are: " + wordArray);
    lineText = "";  // Clear out the text. Now ready to hold the next line of text to print.
    if( wordArray.length == 0 ) { break; }
    
    
    outer++;
   }  // End of WHILE outer <=3 loop.

   flipPort.write( message1, Send2 );
   //flipPort.flush();
   //flipPort.close();
}

function Send2()
{
   flipPort.write( message2, Send3 );
   //flipPort.flush();
}
function Send3()
{
   flipPort.write( message3, Send4 );
   //flipPort.flush();
}
function Send4()
{
   flipPort.write( message4, Send5 );
   //flipPort.flush();
   //flipPort.close();
}
function Send5()
{
   flipPort.write( message5, Send6 );
   //flipPort.flush();
   //flipPort.close();
}
function Send6()
{
   flipPort.write( message6, Send7 );
   //flipPort.flush();
}
function Send7()
{
   flipPort.write( message7, Send8 );
   //flipPort.flush();
}
function Send8()
{
   flipPort.write( message8, Send9 );
   //flipPort.flush();
   //flipPort.close();
}
function Send9()
{
   flipPort.write( message8,function() {console.log('...Write callback returned...'); } );
   flipPort.flush();
   flipPort.close();
}

function placeText( thisChar )
{
   var charValue = thisChar.charCodeAt(0) - 32;   // Gets the ascii value of the char (in decimal).
   var i = lookup[charValue];   // Knowing the ascii value of the char, lookup a value to point into the pixel array.
   var j = length[charValue];
   for( loop = 0; loop < j; loop++ )
   {
      switch( outer )
      {
         case 0:
            {
               if ( disCol <= 27 )
               {
                  message1[disCol + 3] = pixels[ i + loop ];
               }
               else
               {
                  message2[ (disCol-28) + 3] = pixels[ i + loop ];
               }
               disCol++;
               break;
            }
         case 1:
            {
               if ( disCol <= 27 )
               {
                  message3[disCol + 3] = pixels[ i + loop ];
               }
               else
               {
                  message4[ (disCol-28) + 3] = pixels[ i + loop ];
               }
               disCol++;
               break;
            }
         case 2:
            {
               if ( disCol <= 27 )
               {
                  message5[disCol + 3] = pixels[ i + loop ];
               }
               else
               {
                  message6[ (disCol-28) + 3] = pixels[ i + loop ];
               }
               disCol++;
               break;
            }
         case 3:
            {
               if ( disCol <= 27 )
               {
                  message7[disCol + 3] = pixels[ i + loop ];
               }
               else
               {
                  message8[ (disCol-28) + 3] = pixels[ i + loop ];
               }
               disCol++;
               break;
            }
      }
      colptr++;
   }
}

function clearLines( )
{
    for (i = 3; i <= 30; i++)
    {
       message1[i] = 0;
       message2[i] = 0;
       message3[i] = 0;
       message4[i] = 0;
       message5[i] = 0;
       message6[i] = 0;
       message7[i] = 0;
       message8[i] = 0;
    }
}

function ParseIt(error, result)
{
    var returnString = "Blank";
    
    if (error)
    {
       console.log('Error: ' +
       (error.code ? error.code + ' ' + error.message : error.message));
       globalString = "Twitter call returned an error.";
    }
    if (result)
    {
        var newData = JSON.stringify(result);
        res = newData.slice(1);
        newres = res.slice(0,-1);
        var newerData = JSON.parse(newres);
        //console.log(newerData.text);
        var newText = JSON.stringify(newerData.text);
        newerText = newText.slice(10);
        newestText = newerText.trim();
        finalText = newestText.slice(0,-1);
        //console.log(finalText);
        globalString = finalText;
    }
}

function GetTweet()
{
    twitterRestClient.statusesMentions( {count: 1}, ParseIt );
}